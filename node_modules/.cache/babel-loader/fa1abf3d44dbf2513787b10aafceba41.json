{"ast":null,"code":"var _jsxFileName = \"/home/eninov/FirebasePro/fireproim/src/components/imagecropper.js\";\nimport React from \"react\";\nimport Cropper from \"cropperjs\";\nimport \"cropperjs/dist/cropper.min.css\";\nimport \"./imagecropper.css\";\n\nclass ImageCropper extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      imageDestination: \"\"\n    };\n    this.imageElement = React.createRef();\n  }\n\n  componentDidMount() {\n    const cropper = new Cropper(this.imageElement.current, {\n      zoomable: false,\n      scalable: false,\n      aspectRatio: 1,\n      crop: () => {\n        const canvas = cropper.getCroppedCanvas();\n        this.setState({\n          imageDestination: canvas.toDataURL(\"image/png\")\n        });\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"img-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 14\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      ref: this.imageElement,\n      src: this.props.src,\n      alt: \" Source\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"img\", {\n      className: \"img-preview\",\n      src: this.state.imageDestination,\n      alt: \"Destination\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 14\n      }\n    }));\n  }\n\n}\n\nexport default ImageCropper;","map":{"version":3,"sources":["/home/eninov/FirebasePro/fireproim/src/components/imagecropper.js"],"names":["React","Cropper","ImageCropper","Component","constructor","state","imageDestination","imageElement","createRef","componentDidMount","cropper","current","zoomable","scalable","aspectRatio","crop","canvas","getCroppedCanvas","setState","toDataURL","render","props","src"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAO,gCAAP;AACA,OAAO,oBAAP;;AAEA,MAAMC,YAAN,SAA4BF,KAAK,CAACG,SAAlC,CAA2C;AACxCC,EAAAA,WAAW,GAAE;AACT;AACA,SAAKC,KAAL,GAAW;AACPC,MAAAA,gBAAgB,EAAC;AADV,KAAX;AAGA,SAAKC,YAAL,GAAoBP,KAAK,CAACQ,SAAN,EAApB;AACH;;AAEJC,EAAAA,iBAAiB,GAAE;AACf,UAAMC,OAAO,GAAG,IAAIT,OAAJ,CAAY,KAAKM,YAAL,CAAkBI,OAA9B,EAAsC;AAElDC,MAAAA,QAAQ,EAAC,KAFyC;AAGlDC,MAAAA,QAAQ,EAAC,KAHyC;AAIlDC,MAAAA,WAAW,EAAC,CAJsC;AAKlDC,MAAAA,IAAI,EAAE,MAAM;AACV,cAAMC,MAAM,GAAGN,OAAO,CAACO,gBAAR,EAAf;AACA,aAAKC,QAAL,CAAc;AAACZ,UAAAA,gBAAgB,EAACU,MAAM,CAACG,SAAP,CAAiB,WAAjB;AAAlB,SAAd;AACD;AARiD,KAAtC,CAAhB;AAUH;;AAEEC,EAAAA,MAAM,GAAE;AACJ,wBACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACG;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACG;AAAK,MAAA,GAAG,EAAE,KAAKb,YAAf;AAA6B,MAAA,GAAG,EAAE,KAAKc,KAAL,CAAWC,GAA7C;AAAkD,MAAA,GAAG,EAAC,SAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,CADH,eAIG;AAAK,MAAA,SAAS,EAAC,aAAf;AAA6B,MAAA,GAAG,EAAE,KAAKjB,KAAL,CAAWC,gBAA7C;AAA+D,MAAA,GAAG,EAAC,aAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJH,CADH;AAQH;;AA/BuC;;AAkC3C,eAAeJ,YAAf","sourcesContent":["import React from \"react\";\nimport Cropper from \"cropperjs\";\nimport \"cropperjs/dist/cropper.min.css\";\nimport \"./imagecropper.css\";\n\nclass ImageCropper extends  React.Component{\n   constructor(){\n       super();\n       this.state={\n           imageDestination:\"\"\n       }\n       this.imageElement = React.createRef();\n   }\n\ncomponentDidMount(){\n    const cropper = new Cropper(this.imageElement.current,{\n        \n        zoomable:false,\n        scalable:false,\n        aspectRatio:1,\n        crop: () => {\n          const canvas = cropper.getCroppedCanvas();\n          this.setState({imageDestination:canvas.toDataURL(\"image/png\")});\n        } \n    }); \n}\n    \n   render(){\n       return(\n          <div>\n             <div className=\"img-container\">\n                <img ref={this.imageElement} src={this.props.src} alt=\" Source\"/>       \n             </div>\n             <img className=\"img-preview\" src={this.state.imageDestination} alt=\"Destination\"/>          \n          </div>\n      );\n   }\n}\n\nexport default ImageCropper; "]},"metadata":{},"sourceType":"module"}